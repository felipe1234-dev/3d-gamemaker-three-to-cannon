{"version":3,"file":"three-to-cannon.umd.js","sources":["../lib/ConvexHull.js","../src/utils.ts","../src/index.ts"],"sourcesContent":["import {\r\n\tLine3,\r\n\tPlane,\r\n\tTriangle,\r\n\tVector3\r\n} from 'three';\r\n/**\r\n * Ported from: https://github.com/maurizzzio/quickhull3d/ by Mauricio Poppe (https://github.com/maurizzzio)\r\n */\r\n\r\nvar ConvexHull = ( function () {\r\n\r\n\tvar Visible = 0;\r\n\tvar Deleted = 1;\r\n\r\n\tvar v1 = new Vector3();\r\n\r\n\tfunction ConvexHull() {\r\n\r\n\t\tthis.tolerance = - 1;\r\n\r\n\t\tthis.faces = []; // the generated faces of the convex hull\r\n\t\tthis.newFaces = []; // this array holds the faces that are generated within a single iteration\r\n\r\n\t\t// the vertex lists work as follows:\r\n\t\t//\r\n\t\t// let 'a' and 'b' be 'Face' instances\r\n\t\t// let 'v' be points wrapped as instance of 'Vertex'\r\n\t\t//\r\n\t\t//     [v, v, ..., v, v, v, ...]\r\n\t\t//      ^             ^\r\n\t\t//      |             |\r\n\t\t//  a.outside     b.outside\r\n\t\t//\r\n\t\tthis.assigned = new VertexList();\r\n\t\tthis.unassigned = new VertexList();\r\n\r\n\t\tthis.vertices = []; \t// vertices of the hull (internal representation of given geometry data)\r\n\r\n\t}\r\n\r\n\tObject.assign( ConvexHull.prototype, {\r\n\r\n\t\ttoJSON: function () {\r\n\t\t\t// Original ('src') indices do not include interior vertices,\r\n\t\t\t// but 'this.vertices' (the list they index) does. Output ('dst')\r\n\t\t\t// arrays have interior vertices omitted.\r\n\r\n\t\t\tconst srcIndices = this.faces.map((f) => f.toArray());\r\n\t\t\tconst uniqueSrcIndices = Array.from(new Set(srcIndices.flat())).sort();\r\n\r\n\t\t\t// Output vertex positions, omitting interior vertices.\r\n\t\t\tconst dstPositions = [];\r\n\t\t\tfor (let i = 0; i < uniqueSrcIndices.length; i++) {\r\n\t\t\t\tdstPositions.push(\r\n\t\t\t\t\tthis.vertices[uniqueSrcIndices[i]].point.x,\r\n\t\t\t\t\tthis.vertices[uniqueSrcIndices[i]].point.y,\r\n\t\t\t\t\tthis.vertices[uniqueSrcIndices[i]].point.z,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\t// Mapping from 'src' (this.vertices) to 'dst' (dstPositions) indices.\r\n\t\t\tconst srcToDstIndexMap = new Map();\r\n\t\t\tfor (let i = 0; i < uniqueSrcIndices.length; i++) {\r\n\t\t\t\tsrcToDstIndexMap.set(uniqueSrcIndices[i], i);\r\n\t\t\t}\r\n\r\n\t\t\t// Output triangles, as indices on dstPositions.\r\n\t\t\tconst dstIndices = [];\r\n\t\t\tfor (let i = 0; i < srcIndices.length; i++) {\r\n\t\t\t\tdstIndices.push([\r\n\t\t\t\t\tsrcToDstIndexMap.get(srcIndices[i][0]),\r\n\t\t\t\t\tsrcToDstIndexMap.get(srcIndices[i][1]),\r\n\t\t\t\t\tsrcToDstIndexMap.get(srcIndices[i][2]),\r\n\t\t\t\t]);\r\n\t\t\t}\r\n\r\n\t\t\treturn [dstPositions, dstIndices];\r\n\t\t},\r\n\r\n\t\tsetFromPoints: function ( points ) {\r\n\r\n\t\t\tif ( Array.isArray( points ) !== true ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.ConvexHull: Points parameter is not an array.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( points.length < 4 ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.ConvexHull: The algorithm needs at least four points.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.makeEmpty();\r\n\r\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tthis.vertices.push( new VertexNode( points[ i ], i ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.compute();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromObject: function ( object ) {\r\n\r\n\t\t\tvar points = [];\r\n\r\n\t\t\tobject.updateMatrixWorld( true );\r\n\r\n\t\t\tobject.traverse( function ( node ) {\r\n\r\n\t\t\t\tvar i, l, point;\r\n\r\n\t\t\t\tvar geometry = node.geometry;\r\n\r\n\t\t\t\tif ( geometry === undefined ) return;\r\n\r\n\t\t\t\tif ( geometry.isGeometry ) {\r\n\r\n\t\t\t\t\tgeometry = geometry.toBufferGeometry\r\n\t\t\t\t\t\t? geometry.toBufferGeometry()\r\n\t\t\t\t\t\t: new BufferGeometry().fromGeometry( geometry );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\t\tvar attribute = geometry.attributes.position;\r\n\r\n\t\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0, l = attribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tpoint = new Vector3();\r\n\r\n\t\t\t\t\t\t\tpoint.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );\r\n\r\n\t\t\t\t\t\t\tpoints.push( point );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t\treturn this.setFromPoints( points );\r\n\r\n\t\t},\r\n\r\n\t\tcontainsPoint: function ( point ) {\r\n\r\n\t\t\tvar faces = this.faces;\r\n\r\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\t// compute signed distance and check on what half space the point lies\r\n\r\n\t\t\t\tif ( face.distanceToPoint( point ) > this.tolerance ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t},\r\n\r\n\t\tintersectRay: function ( ray, target ) {\r\n\r\n\t\t\t// based on \"Fast Ray-Convex Polyhedron Intersection\"  by Eric Haines, GRAPHICS GEMS II\r\n\r\n\t\t\tvar faces = this.faces;\r\n\r\n\t\t\tvar tNear = - Infinity;\r\n\t\t\tvar tFar = Infinity;\r\n\r\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\t// interpret faces as planes for the further computation\r\n\r\n\t\t\t\tvar vN = face.distanceToPoint( ray.origin );\r\n\t\t\t\tvar vD = face.normal.dot( ray.direction );\r\n\r\n\t\t\t\t// if the origin is on the positive side of a plane (so the plane can \"see\" the origin) and\r\n\t\t\t\t// the ray is turned away or parallel to the plane, there is no intersection\r\n\r\n\t\t\t\tif ( vN > 0 && vD >= 0 ) return null;\r\n\r\n\t\t\t\t// compute the distance from the ray’s origin to the intersection with the plane\r\n\r\n\t\t\t\tvar t = ( vD !== 0 ) ? ( - vN / vD ) : 0;\r\n\r\n\t\t\t\t// only proceed if the distance is positive. a negative distance means the intersection point\r\n\t\t\t\t// lies \"behind\" the origin\r\n\r\n\t\t\t\tif ( t <= 0 ) continue;\r\n\r\n\t\t\t\t// now categorized plane as front-facing or back-facing\r\n\r\n\t\t\t\tif ( vD > 0 ) {\r\n\r\n\t\t\t\t\t//  plane faces away from the ray, so this plane is a back-face\r\n\r\n\t\t\t\t\ttFar = Math.min( t, tFar );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// front-face\r\n\r\n\t\t\t\t\ttNear = Math.max( t, tNear );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( tNear > tFar ) {\r\n\r\n\t\t\t\t\t// if tNear ever is greater than tFar, the ray must miss the convex hull\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// evaluate intersection point\r\n\r\n\t\t\t// always try tNear first since its the closer intersection point\r\n\r\n\t\t\tif ( tNear !== - Infinity ) {\r\n\r\n\t\t\t\tray.at( tNear, target );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tray.at( tFar, target );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tintersectsRay: function ( ray ) {\r\n\r\n\t\t\treturn this.intersectRay( ray, v1 ) !== null;\r\n\r\n\t\t},\r\n\r\n\t\tmakeEmpty: function () {\r\n\r\n\t\t\tthis.faces = [];\r\n\t\t\tthis.vertices = [];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Adds a vertex to the 'assigned' list of vertices and assigns it to the given face\r\n\r\n\t\taddVertexToFace: function ( vertex, face ) {\r\n\r\n\t\t\tvertex.face = face;\r\n\r\n\t\t\tif ( face.outside === null ) {\r\n\r\n\t\t\t\tthis.assigned.append( vertex );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.assigned.insertBefore( face.outside, vertex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tface.outside = vertex;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Removes a vertex from the 'assigned' list of vertices and from the given face\r\n\r\n\t\tremoveVertexFromFace: function ( vertex, face ) {\r\n\r\n\t\t\tif ( vertex === face.outside ) {\r\n\r\n\t\t\t\t// fix face.outside link\r\n\r\n\t\t\t\tif ( vertex.next !== null && vertex.next.face === face ) {\r\n\r\n\t\t\t\t\t// face has at least 2 outside vertices, move the 'outside' reference\r\n\r\n\t\t\t\t\tface.outside = vertex.next;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// vertex was the only outside vertex that face had\r\n\r\n\t\t\t\t\tface.outside = null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.assigned.remove( vertex );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertext list\r\n\r\n\t\tremoveAllVerticesFromFace: function ( face ) {\r\n\r\n\t\t\tif ( face.outside !== null ) {\r\n\r\n\t\t\t\t// reference to the first and last vertex of this face\r\n\r\n\t\t\t\tvar start = face.outside;\r\n\t\t\t\tvar end = face.outside;\r\n\r\n\t\t\t\twhile ( end.next !== null && end.next.face === face ) {\r\n\r\n\t\t\t\t\tend = end.next;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.assigned.removeSubList( start, end );\r\n\r\n\t\t\t\t// fix references\r\n\r\n\t\t\t\tstart.prev = end.next = null;\r\n\t\t\t\tface.outside = null;\r\n\r\n\t\t\t\treturn start;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t// Removes all the visible vertices that 'face' is able to see\r\n\r\n\t\tdeleteFaceVertices: function ( face, absorbingFace ) {\r\n\r\n\t\t\tvar faceVertices = this.removeAllVerticesFromFace( face );\r\n\r\n\t\t\tif ( faceVertices !== undefined ) {\r\n\r\n\t\t\t\tif ( absorbingFace === undefined ) {\r\n\r\n\t\t\t\t\t// mark the vertices to be reassigned to some other face\r\n\r\n\t\t\t\t\tthis.unassigned.appendChain( faceVertices );\r\n\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// if there's an absorbing face try to assign as many vertices as possible to it\r\n\r\n\t\t\t\t\tvar vertex = faceVertices;\r\n\r\n\t\t\t\t\tdo {\r\n\r\n\t\t\t\t\t\t// we need to buffer the subsequent vertex at this point because the 'vertex.next' reference\r\n\t\t\t\t\t\t// will be changed by upcoming method calls\r\n\r\n\t\t\t\t\t\tvar nextVertex = vertex.next;\r\n\r\n\t\t\t\t\t\tvar distance = absorbingFace.distanceToPoint( vertex.point );\r\n\r\n\t\t\t\t\t\t// check if 'vertex' is able to see 'absorbingFace'\r\n\r\n\t\t\t\t\t\tif ( distance > this.tolerance ) {\r\n\r\n\t\t\t\t\t\t\tthis.addVertexToFace( vertex, absorbingFace );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tthis.unassigned.append( vertex );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// now assign next vertex\r\n\r\n\t\t\t\t\t\tvertex = nextVertex;\r\n\r\n\t\t\t\t\t} while ( vertex !== null );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Reassigns as many vertices as possible from the unassigned list to the new faces\r\n\r\n\t\tresolveUnassignedPoints: function ( newFaces ) {\r\n\r\n\t\t\tif ( this.unassigned.isEmpty() === false ) {\r\n\r\n\t\t\t\tvar vertex = this.unassigned.first();\r\n\r\n\t\t\t\tdo {\r\n\r\n\t\t\t\t\t// buffer 'next' reference, see .deleteFaceVertices()\r\n\r\n\t\t\t\t\tvar nextVertex = vertex.next;\r\n\r\n\t\t\t\t\tvar maxDistance = this.tolerance;\r\n\r\n\t\t\t\t\tvar maxFace = null;\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < newFaces.length; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar face = newFaces[ i ];\r\n\r\n\t\t\t\t\t\tif ( face.mark === Visible ) {\r\n\r\n\t\t\t\t\t\t\tvar distance = face.distanceToPoint( vertex.point );\r\n\r\n\t\t\t\t\t\t\tif ( distance > maxDistance ) {\r\n\r\n\t\t\t\t\t\t\t\tmaxDistance = distance;\r\n\t\t\t\t\t\t\t\tmaxFace = face;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( maxDistance > 1000 * this.tolerance ) break;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 'maxFace' can be null e.g. if there are identical vertices\r\n\r\n\t\t\t\t\tif ( maxFace !== null ) {\r\n\r\n\t\t\t\t\t\tthis.addVertexToFace( vertex, maxFace );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvertex = nextVertex;\r\n\r\n\t\t\t\t} while ( vertex !== null );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Computes the extremes of a simplex which will be the initial hull\r\n\r\n\t\tcomputeExtremes: function () {\r\n\r\n\t\t\tvar min = new Vector3();\r\n\t\t\tvar max = new Vector3();\r\n\r\n\t\t\tvar minVertices = [];\r\n\t\t\tvar maxVertices = [];\r\n\r\n\t\t\tvar i, l, j;\r\n\r\n\t\t\t// initially assume that the first vertex is the min/max\r\n\r\n\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\tminVertices[ i ] = maxVertices[ i ] = this.vertices[ 0 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmin.copy( this.vertices[ 0 ].point );\r\n\t\t\tmax.copy( this.vertices[ 0 ].point );\r\n\r\n\t\t\t// compute the min/max vertex on all six directions\r\n\r\n\t\t\tfor ( i = 0, l = this.vertices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\t\tvar point = vertex.point;\r\n\r\n\t\t\t\t// update the min coordinates\r\n\r\n\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\tif ( point.getComponent( j ) < min.getComponent( j ) ) {\r\n\r\n\t\t\t\t\t\tmin.setComponent( j, point.getComponent( j ) );\r\n\t\t\t\t\t\tminVertices[ j ] = vertex;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// update the max coordinates\r\n\r\n\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\tif ( point.getComponent( j ) > max.getComponent( j ) ) {\r\n\r\n\t\t\t\t\t\tmax.setComponent( j, point.getComponent( j ) );\r\n\t\t\t\t\t\tmaxVertices[ j ] = vertex;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// use min/max vectors to compute an optimal epsilon\r\n\r\n\t\t\tthis.tolerance = 3 * Number.EPSILON * (\r\n\t\t\t\tMath.max( Math.abs( min.x ), Math.abs( max.x ) ) +\r\n\t\t\t\tMath.max( Math.abs( min.y ), Math.abs( max.y ) ) +\r\n\t\t\t\tMath.max( Math.abs( min.z ), Math.abs( max.z ) )\r\n\t\t\t);\r\n\r\n\t\t\treturn { min: minVertices, max: maxVertices };\r\n\r\n\t\t},\r\n\r\n\t\t// Computes the initial simplex assigning to its faces all the points\r\n\t\t// that are candidates to form part of the hull\r\n\r\n\t\tcomputeInitialHull: function () {\r\n\r\n\t\t\tvar line3, plane, closestPoint;\r\n\r\n\t\t\treturn function computeInitialHull() {\r\n\r\n\t\t\t\tif ( line3 === undefined ) {\r\n\r\n\t\t\t\t\tline3 = new Line3();\r\n\t\t\t\t\tplane = new Plane();\r\n\t\t\t\t\tclosestPoint = new Vector3();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar vertex, vertices = this.vertices;\r\n\t\t\t\tvar extremes = this.computeExtremes();\r\n\t\t\t\tvar min = extremes.min;\r\n\t\t\t\tvar max = extremes.max;\r\n\r\n\t\t\t\tvar v0, v1, v2, v3;\r\n\t\t\t\tvar i, l, j;\r\n\r\n\t\t\t\t// 1. Find the two vertices 'v0' and 'v1' with the greatest 1d separation\r\n\t\t\t\t// (max.x - min.x)\r\n\t\t\t\t// (max.y - min.y)\r\n\t\t\t\t// (max.z - min.z)\r\n\r\n\t\t\t\tvar distance, maxDistance = 0;\r\n\t\t\t\tvar index = 0;\r\n\r\n\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\tdistance = max[ i ].point.getComponent( i ) - min[ i ].point.getComponent( i );\r\n\r\n\t\t\t\t\tif ( distance > maxDistance ) {\r\n\r\n\t\t\t\t\t\tmaxDistance = distance;\r\n\t\t\t\t\t\tindex = i;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tv0 = min[ index ];\r\n\t\t\t\tv1 = max[ index ];\r\n\r\n\t\t\t\t// 2. The next vertex 'v2' is the one farthest to the line formed by 'v0' and 'v1'\r\n\r\n\t\t\t\tmaxDistance = 0;\r\n\t\t\t\tline3.set( v0.point, v1.point );\r\n\r\n\t\t\t\tfor ( i = 0, l = this.vertices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvertex = vertices[ i ];\r\n\r\n\t\t\t\t\tif ( vertex !== v0 && vertex !== v1 ) {\r\n\r\n\t\t\t\t\t\tline3.closestPointToPoint( vertex.point, true, closestPoint );\r\n\r\n\t\t\t\t\t\tdistance = closestPoint.distanceToSquared( vertex.point );\r\n\r\n\t\t\t\t\t\tif ( distance > maxDistance ) {\r\n\r\n\t\t\t\t\t\t\tmaxDistance = distance;\r\n\t\t\t\t\t\t\tv2 = vertex;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 3. The next vertex 'v3' is the one farthest to the plane 'v0', 'v1', 'v2'\r\n\r\n\t\t\t\tmaxDistance = - 1;\r\n\t\t\t\tplane.setFromCoplanarPoints( v0.point, v1.point, v2.point );\r\n\r\n\t\t\t\tfor ( i = 0, l = this.vertices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvertex = vertices[ i ];\r\n\r\n\t\t\t\t\tif ( vertex !== v0 && vertex !== v1 && vertex !== v2 ) {\r\n\r\n\t\t\t\t\t\tdistance = Math.abs( plane.distanceToPoint( vertex.point ) );\r\n\r\n\t\t\t\t\t\tif ( distance > maxDistance ) {\r\n\r\n\t\t\t\t\t\t\tmaxDistance = distance;\r\n\t\t\t\t\t\t\tv3 = vertex;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar faces = [];\r\n\r\n\t\t\t\tif ( plane.distanceToPoint( v3.point ) < 0 ) {\r\n\r\n\t\t\t\t\t// the face is not able to see the point so 'plane.normal' is pointing outside the tetrahedron\r\n\r\n\t\t\t\t\tfaces.push(\r\n\t\t\t\t\t\tFace.create( v0, v1, v2 ),\r\n\t\t\t\t\t\tFace.create( v3, v1, v0 ),\r\n\t\t\t\t\t\tFace.create( v3, v2, v1 ),\r\n\t\t\t\t\t\tFace.create( v3, v0, v2 )\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// set the twin edge\r\n\r\n\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\t\tj = ( i + 1 ) % 3;\r\n\r\n\t\t\t\t\t\t// join face[ i ] i > 0, with the first face\r\n\r\n\t\t\t\t\t\tfaces[ i + 1 ].getEdge( 2 ).setTwin( faces[ 0 ].getEdge( j ) );\r\n\r\n\t\t\t\t\t\t// join face[ i ] with face[ i + 1 ], 1 <= i <= 3\r\n\r\n\t\t\t\t\t\tfaces[ i + 1 ].getEdge( 1 ).setTwin( faces[ j + 1 ].getEdge( 0 ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// the face is able to see the point so 'plane.normal' is pointing inside the tetrahedron\r\n\r\n\t\t\t\t\tfaces.push(\r\n\t\t\t\t\t\tFace.create( v0, v2, v1 ),\r\n\t\t\t\t\t\tFace.create( v3, v0, v1 ),\r\n\t\t\t\t\t\tFace.create( v3, v1, v2 ),\r\n\t\t\t\t\t\tFace.create( v3, v2, v0 )\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// set the twin edge\r\n\r\n\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\t\tj = ( i + 1 ) % 3;\r\n\r\n\t\t\t\t\t\t// join face[ i ] i > 0, with the first face\r\n\r\n\t\t\t\t\t\tfaces[ i + 1 ].getEdge( 2 ).setTwin( faces[ 0 ].getEdge( ( 3 - i ) % 3 ) );\r\n\r\n\t\t\t\t\t\t// join face[ i ] with face[ i + 1 ]\r\n\r\n\t\t\t\t\t\tfaces[ i + 1 ].getEdge( 0 ).setTwin( faces[ j + 1 ].getEdge( 1 ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// the initial hull is the tetrahedron\r\n\r\n\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\t\tthis.faces.push( faces[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// initial assignment of vertices to the faces of the tetrahedron\r\n\r\n\t\t\t\tfor ( i = 0, l = vertices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvertex = vertices[ i ];\r\n\r\n\t\t\t\t\tif ( vertex !== v0 && vertex !== v1 && vertex !== v2 && vertex !== v3 ) {\r\n\r\n\t\t\t\t\t\tmaxDistance = this.tolerance;\r\n\t\t\t\t\t\tvar maxFace = null;\r\n\r\n\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tdistance = this.faces[ j ].distanceToPoint( vertex.point );\r\n\r\n\t\t\t\t\t\t\tif ( distance > maxDistance ) {\r\n\r\n\t\t\t\t\t\t\t\tmaxDistance = distance;\r\n\t\t\t\t\t\t\t\tmaxFace = this.faces[ j ];\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( maxFace !== null ) {\r\n\r\n\t\t\t\t\t\t\tthis.addVertexToFace( vertex, maxFace );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\t// Removes inactive faces\r\n\r\n\t\treindexFaces: function () {\r\n\r\n\t\t\tvar activeFaces = [];\r\n\r\n\t\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\r\n\r\n\t\t\t\tvar face = this.faces[ i ];\r\n\r\n\t\t\t\tif ( face.mark === Visible ) {\r\n\r\n\t\t\t\t\tactiveFaces.push( face );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.faces = activeFaces;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Finds the next vertex to create faces with the current hull\r\n\r\n\t\tnextVertexToAdd: function () {\r\n\r\n\t\t\t// if the 'assigned' list of vertices is empty, no vertices are left. return with 'undefined'\r\n\r\n\t\t\tif ( this.assigned.isEmpty() === false ) {\r\n\r\n\t\t\t\tvar eyeVertex, maxDistance = 0;\r\n\r\n\t\t\t\t// grap the first available face and start with the first visible vertex of that face\r\n\r\n\t\t\t\tvar eyeFace = this.assigned.first().face;\r\n\t\t\t\tvar vertex = eyeFace.outside;\r\n\r\n\t\t\t\t// now calculate the farthest vertex that face can see\r\n\r\n\t\t\t\tdo {\r\n\r\n\t\t\t\t\tvar distance = eyeFace.distanceToPoint( vertex.point );\r\n\r\n\t\t\t\t\tif ( distance > maxDistance ) {\r\n\r\n\t\t\t\t\t\tmaxDistance = distance;\r\n\t\t\t\t\t\teyeVertex = vertex;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvertex = vertex.next;\r\n\r\n\t\t\t\t} while ( vertex !== null && vertex.face === eyeFace );\r\n\r\n\t\t\t\treturn eyeVertex;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t// Computes a chain of half edges in CCW order called the 'horizon'.\r\n\t\t// For an edge to be part of the horizon it must join a face that can see\r\n\t\t// 'eyePoint' and a face that cannot see 'eyePoint'.\r\n\r\n\t\tcomputeHorizon: function ( eyePoint, crossEdge, face, horizon ) {\r\n\r\n\t\t\t// moves face's vertices to the 'unassigned' vertex list\r\n\r\n\t\t\tthis.deleteFaceVertices( face );\r\n\r\n\t\t\tface.mark = Deleted;\r\n\r\n\t\t\tvar edge;\r\n\r\n\t\t\tif ( crossEdge === null ) {\r\n\r\n\t\t\t\tedge = crossEdge = face.getEdge( 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// start from the next edge since 'crossEdge' was already analyzed\r\n\t\t\t\t// (actually 'crossEdge.twin' was the edge who called this method recursively)\r\n\r\n\t\t\t\tedge = crossEdge.next;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdo {\r\n\r\n\t\t\t\tvar twinEdge = edge.twin;\r\n\t\t\t\tvar oppositeFace = twinEdge.face;\r\n\r\n\t\t\t\tif ( oppositeFace.mark === Visible ) {\r\n\r\n\t\t\t\t\tif ( oppositeFace.distanceToPoint( eyePoint ) > this.tolerance ) {\r\n\r\n\t\t\t\t\t\t// the opposite face can see the vertex, so proceed with next edge\r\n\r\n\t\t\t\t\t\tthis.computeHorizon( eyePoint, twinEdge, oppositeFace, horizon );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// the opposite face can't see the vertex, so this edge is part of the horizon\r\n\r\n\t\t\t\t\t\thorizon.push( edge );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tedge = edge.next;\r\n\r\n\t\t\t} while ( edge !== crossEdge );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order\r\n\r\n\t\taddAdjoiningFace: function ( eyeVertex, horizonEdge ) {\r\n\r\n\t\t\t// all the half edges are created in ccw order thus the face is always pointing outside the hull\r\n\r\n\t\t\tvar face = Face.create( eyeVertex, horizonEdge.tail(), horizonEdge.head() );\r\n\r\n\t\t\tthis.faces.push( face );\r\n\r\n\t\t\t// join face.getEdge( - 1 ) with the horizon's opposite edge face.getEdge( - 1 ) = face.getEdge( 2 )\r\n\r\n\t\t\tface.getEdge( - 1 ).setTwin( horizonEdge.twin );\r\n\r\n\t\t\treturn face.getEdge( 0 ); // the half edge whose vertex is the eyeVertex\r\n\r\n\r\n\t\t},\r\n\r\n\t\t//  Adds 'horizon.length' faces to the hull, each face will be linked with the\r\n\t\t//  horizon opposite face and the face on the left/right\r\n\r\n\t\taddNewFaces: function ( eyeVertex, horizon ) {\r\n\r\n\t\t\tthis.newFaces = [];\r\n\r\n\t\t\tvar firstSideEdge = null;\r\n\t\t\tvar previousSideEdge = null;\r\n\r\n\t\t\tfor ( var i = 0; i < horizon.length; i ++ ) {\r\n\r\n\t\t\t\tvar horizonEdge = horizon[ i ];\r\n\r\n\t\t\t\t// returns the right side edge\r\n\r\n\t\t\t\tvar sideEdge = this.addAdjoiningFace( eyeVertex, horizonEdge );\r\n\r\n\t\t\t\tif ( firstSideEdge === null ) {\r\n\r\n\t\t\t\t\tfirstSideEdge = sideEdge;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// joins face.getEdge( 1 ) with previousFace.getEdge( 0 )\r\n\r\n\t\t\t\t\tsideEdge.next.setTwin( previousSideEdge );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.newFaces.push( sideEdge.face );\r\n\t\t\t\tpreviousSideEdge = sideEdge;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// perform final join of new faces\r\n\r\n\t\t\tfirstSideEdge.next.setTwin( previousSideEdge );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Adds a vertex to the hull\r\n\r\n\t\taddVertexToHull: function ( eyeVertex ) {\r\n\r\n\t\t\tvar horizon = [];\r\n\r\n\t\t\tthis.unassigned.clear();\r\n\r\n\t\t\t// remove 'eyeVertex' from 'eyeVertex.face' so that it can't be added to the 'unassigned' vertex list\r\n\r\n\t\t\tthis.removeVertexFromFace( eyeVertex, eyeVertex.face );\r\n\r\n\t\t\tthis.computeHorizon( eyeVertex.point, null, eyeVertex.face, horizon );\r\n\r\n\t\t\tthis.addNewFaces( eyeVertex, horizon );\r\n\r\n\t\t\t// reassign 'unassigned' vertices to the new faces\r\n\r\n\t\t\tthis.resolveUnassignedPoints( this.newFaces );\r\n\r\n\t\t\treturn\tthis;\r\n\r\n\t\t},\r\n\r\n\t\tcleanup: function () {\r\n\r\n\t\t\tthis.assigned.clear();\r\n\t\t\tthis.unassigned.clear();\r\n\t\t\tthis.newFaces = [];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcompute: function () {\r\n\r\n\t\t\tvar vertex;\r\n\r\n\t\t\tthis.computeInitialHull();\r\n\r\n\t\t\t// add all available vertices gradually to the hull\r\n\r\n\t\t\twhile ( ( vertex = this.nextVertexToAdd() ) !== undefined ) {\r\n\r\n\t\t\t\tthis.addVertexToHull( vertex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.reindexFaces();\r\n\r\n\t\t\tthis.cleanup();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tfunction Face() {\r\n\r\n\t\tthis.normal = new Vector3();\r\n\t\tthis.midpoint = new Vector3();\r\n\t\tthis.area = 0;\r\n\r\n\t\tthis.constant = 0; // signed distance from face to the origin\r\n\t\tthis.outside = null; // reference to a vertex in a vertex list this face can see\r\n\t\tthis.mark = Visible;\r\n\t\tthis.edge = null;\r\n\r\n\t}\r\n\r\n\tObject.assign( Face, {\r\n\r\n\t\tcreate: function ( a, b, c ) {\r\n\r\n\t\t\tvar face = new Face();\r\n\r\n\t\t\tvar e0 = new HalfEdge( a, face );\r\n\t\t\tvar e1 = new HalfEdge( b, face );\r\n\t\t\tvar e2 = new HalfEdge( c, face );\r\n\r\n\t\t\t// join edges\r\n\r\n\t\t\te0.next = e2.prev = e1;\r\n\t\t\te1.next = e0.prev = e2;\r\n\t\t\te2.next = e1.prev = e0;\r\n\r\n\t\t\t// main half edge reference\r\n\r\n\t\t\tface.edge = e0;\r\n\r\n\t\t\treturn face.compute();\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Face.prototype, {\r\n\r\n\t\ttoArray: function () {\r\n\t\t\tconst indices = [];\r\n\t\t\tlet edge = this.edge;\r\n\t\t\tdo {\r\n\t\t\t\tindices.push(edge.head().index);\r\n\t\t\t\tedge = edge.next;\r\n\t\t\t} while (edge !== this.edge);\r\n\t\t\treturn indices;\r\n\t\t},\r\n\r\n\t\tgetEdge: function ( i ) {\r\n\r\n\t\t\tvar edge = this.edge;\r\n\r\n\t\t\twhile ( i > 0 ) {\r\n\r\n\t\t\t\tedge = edge.next;\r\n\t\t\t\ti --;\r\n\r\n\t\t\t}\r\n\r\n\t\t\twhile ( i < 0 ) {\r\n\r\n\t\t\t\tedge = edge.prev;\r\n\t\t\t\ti ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn edge;\r\n\r\n\t\t},\r\n\r\n\t\tcompute: function () {\r\n\r\n\t\t\tvar triangle;\r\n\r\n\t\t\treturn function compute() {\r\n\r\n\t\t\t\tif ( triangle === undefined ) triangle = new Triangle();\r\n\r\n\t\t\t\tvar a = this.edge.tail();\r\n\t\t\t\tvar b = this.edge.head();\r\n\t\t\t\tvar c = this.edge.next.head();\r\n\r\n\t\t\t\ttriangle.set( a.point, b.point, c.point );\r\n\r\n\t\t\t\ttriangle.getNormal( this.normal );\r\n\t\t\t\ttriangle.getMidpoint( this.midpoint );\r\n\t\t\t\tthis.area = triangle.getArea();\r\n\r\n\t\t\t\tthis.constant = this.normal.dot( this.midpoint );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tdistanceToPoint: function ( point ) {\r\n\r\n\t\t\treturn this.normal.dot( point ) - this.constant;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t// Entity for a Doubly-Connected Edge List (DCEL).\r\n\r\n\tfunction HalfEdge( vertex, face ) {\r\n\r\n\t\tthis.vertex = vertex;\r\n\t\tthis.prev = null;\r\n\t\tthis.next = null;\r\n\t\tthis.twin = null;\r\n\t\tthis.face = face;\r\n\r\n\t}\r\n\r\n\tObject.assign( HalfEdge.prototype, {\r\n\r\n\t\thead: function () {\r\n\r\n\t\t\treturn this.vertex;\r\n\r\n\t\t},\r\n\r\n\t\ttail: function () {\r\n\r\n\t\t\treturn this.prev ? this.prev.vertex : null;\r\n\r\n\t\t},\r\n\r\n\t\tlength: function () {\r\n\r\n\t\t\tvar head = this.head();\r\n\t\t\tvar tail = this.tail();\r\n\r\n\t\t\tif ( tail !== null ) {\r\n\r\n\t\t\t\treturn tail.point.distanceTo( head.point );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn - 1;\r\n\r\n\t\t},\r\n\r\n\t\tlengthSquared: function () {\r\n\r\n\t\t\tvar head = this.head();\r\n\t\t\tvar tail = this.tail();\r\n\r\n\t\t\tif ( tail !== null ) {\r\n\r\n\t\t\t\treturn tail.point.distanceToSquared( head.point );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn - 1;\r\n\r\n\t\t},\r\n\r\n\t\tsetTwin: function ( edge ) {\r\n\r\n\t\t\tthis.twin = edge;\r\n\t\t\tedge.twin = this;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t// A vertex as a double linked list node.\r\n\r\n\tfunction VertexNode( point, index ) {\r\n\r\n\t\tthis.point = point;\r\n\t\t// index in the input array\r\n\t\tthis.index = index;\r\n\t\tthis.prev = null;\r\n\t\tthis.next = null;\r\n\t\t// the face that is able to see this vertex\r\n\t\tthis.face = null;\r\n\r\n\t}\r\n\r\n\t// A double linked list that contains vertex nodes.\r\n\r\n\tfunction VertexList() {\r\n\r\n\t\tthis.head = null;\r\n\t\tthis.tail = null;\r\n\r\n\t}\r\n\r\n\tObject.assign( VertexList.prototype, {\r\n\r\n\t\tfirst: function () {\r\n\r\n\t\t\treturn this.head;\r\n\r\n\t\t},\r\n\r\n\t\tlast: function () {\r\n\r\n\t\t\treturn this.tail;\r\n\r\n\t\t},\r\n\r\n\t\tclear: function () {\r\n\r\n\t\t\tthis.head = this.tail = null;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Inserts a vertex before the target vertex\r\n\r\n\t\tinsertBefore: function ( target, vertex ) {\r\n\r\n\t\t\tvertex.prev = target.prev;\r\n\t\t\tvertex.next = target;\r\n\r\n\t\t\tif ( vertex.prev === null ) {\r\n\r\n\t\t\t\tthis.head = vertex;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvertex.prev.next = vertex;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.prev = vertex;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Inserts a vertex after the target vertex\r\n\r\n\t\tinsertAfter: function ( target, vertex ) {\r\n\r\n\t\t\tvertex.prev = target;\r\n\t\t\tvertex.next = target.next;\r\n\r\n\t\t\tif ( vertex.next === null ) {\r\n\r\n\t\t\t\tthis.tail = vertex;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvertex.next.prev = vertex;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.next = vertex;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Appends a vertex to the end of the linked list\r\n\r\n\t\tappend: function ( vertex ) {\r\n\r\n\t\t\tif ( this.head === null ) {\r\n\r\n\t\t\t\tthis.head = vertex;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.tail.next = vertex;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvertex.prev = this.tail;\r\n\t\t\tvertex.next = null; // the tail has no subsequent vertex\r\n\r\n\t\t\tthis.tail = vertex;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Appends a chain of vertices where 'vertex' is the head.\r\n\r\n\t\tappendChain: function ( vertex ) {\r\n\r\n\t\t\tif ( this.head === null ) {\r\n\r\n\t\t\t\tthis.head = vertex;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.tail.next = vertex;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvertex.prev = this.tail;\r\n\r\n\t\t\t// ensure that the 'tail' reference points to the last vertex of the chain\r\n\r\n\t\t\twhile ( vertex.next !== null ) {\r\n\r\n\t\t\t\tvertex = vertex.next;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.tail = vertex;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Removes a vertex from the linked list\r\n\r\n\t\tremove: function ( vertex ) {\r\n\r\n\t\t\tif ( vertex.prev === null ) {\r\n\r\n\t\t\t\tthis.head = vertex.next;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvertex.prev.next = vertex.next;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( vertex.next === null ) {\r\n\r\n\t\t\t\tthis.tail = vertex.prev;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvertex.next.prev = vertex.prev;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Removes a list of vertices whose 'head' is 'a' and whose 'tail' is b\r\n\r\n\t\tremoveSubList: function ( a, b ) {\r\n\r\n\t\t\tif ( a.prev === null ) {\r\n\r\n\t\t\t\tthis.head = b.next;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ta.prev.next = b.next;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( b.next === null ) {\r\n\r\n\t\t\t\tthis.tail = a.prev;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tb.next.prev = a.prev;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tisEmpty: function () {\r\n\r\n\t\t\treturn this.head === null;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\treturn ConvexHull;\r\n\r\n} )();\r\n\r\nexport { ConvexHull };\r\n","import { BufferAttribute, BufferGeometry, Mesh, Object3D, Quaternion, Vector3 } from 'three';\r\nimport type { Geometry } from 'three/examples/jsm/deprecated/Geometry';\r\n\r\nconst _v1 = new Vector3();\r\nconst _v2 = new Vector3();\r\nconst _q1 = new Quaternion();\r\n\r\n/**\r\n* Returns a single geometry for the given object. If the object is compound,\r\n* its geometries are automatically merged. Bake world scale into each\r\n* geometry, because we can't easily apply that to the cannonjs shapes later.\r\n*/\r\nexport function getGeometry (object: Object3D): BufferGeometry | null {\r\n\tconst meshes = getMeshes(object);\r\n\tif (meshes.length === 0) return null;\r\n\r\n\t// Single mesh. Return, preserving original type.\r\n\tif (meshes.length === 1) {\r\n\t\treturn normalizeGeometry(meshes[0]);\r\n\t}\r\n\r\n\t// Multiple meshes. Merge and return.\r\n\tlet mesh: Mesh | undefined;\r\n\tconst geometries: BufferGeometry[] = [];\r\n\twhile ((mesh = meshes.pop())) {\r\n\t\tgeometries.push(simplifyGeometry(normalizeGeometry(mesh)));\r\n\t}\r\n\r\n\treturn mergeBufferGeometries(geometries);\r\n}\r\n\r\nfunction normalizeGeometry (mesh: Mesh): BufferGeometry {\r\n\tlet geometry: BufferGeometry = mesh.geometry;\r\n\tif ((geometry as unknown as Geometry).toBufferGeometry) {\r\n\t\tgeometry = (geometry as unknown as Geometry).toBufferGeometry();\r\n\t} else {\r\n\t\t// Preserve original type, e.g. CylinderBufferGeometry.\r\n\t\tgeometry = geometry.clone();\r\n\t}\r\n\r\n\tmesh.updateMatrixWorld();\r\n\tmesh.matrixWorld.decompose(_v1, _q1, _v2);\r\n\tgeometry.scale(_v2.x, _v2.y, _v2.z);\r\n\treturn geometry;\r\n}\r\n\r\n/**\r\n * Greatly simplified version of BufferGeometryUtils.mergeBufferGeometries.\r\n * Because we only care about the vertex positions, and not the indices or\r\n * other attributes, we throw everything else away.\r\n */\r\nfunction mergeBufferGeometries (geometries: BufferGeometry[]): BufferGeometry {\r\n\tlet vertexCount = 0;\r\n\tfor (let i = 0; i < geometries.length; i++) {\r\n\t\tconst position = geometries[i].attributes.position;\r\n\t\tif (position && position.itemSize === 3) {\r\n\t\t\tvertexCount += position.count;\r\n\t\t}\r\n\t}\r\n\r\n\tconst positionArray = new Float32Array(vertexCount * 3);\r\n\r\n\tlet positionOffset = 0;\r\n\tfor (let i = 0; i < geometries.length; i++) {\r\n\t\tconst position = geometries[i].attributes.position;\r\n\t\tif (position && position.itemSize === 3) {\r\n\t\t\tfor (let j = 0; j < position.count; j++) {\r\n\t\t\t\tpositionArray[positionOffset++] = position.getX(j);\r\n\t\t\t\tpositionArray[positionOffset++] = position.getY(j);\r\n\t\t\t\tpositionArray[positionOffset++] = position.getZ(j);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn new BufferGeometry().setAttribute('position', new BufferAttribute(positionArray, 3));\r\n}\r\n\r\nexport function getVertices (geometry: BufferGeometry): Float32Array {\r\n\tconst position = geometry.attributes.position;\r\n\tconst vertices = new Float32Array(position.count * 3);\r\n\tfor (let i = 0; i < position.count; i++) {\r\n\t\tvertices[i * 3] = position.getX(i);\r\n\t\tvertices[i * 3 + 1] = position.getY(i);\r\n\t\tvertices[i * 3 + 2] = position.getZ(i);\r\n\t}\r\n\treturn vertices;\r\n}\r\n\r\n/**\r\n* Returns a flat array of THREE.Mesh instances from the given object. If\r\n* nested transformations are found, they are applied to child meshes\r\n* as mesh.userData.matrix, so that each mesh has its position/rotation/scale\r\n* independently of all of its parents except the top-level object.\r\n*/\r\nfunction getMeshes (object: Object3D): Mesh[] {\r\n\tconst meshes: Mesh[] = [];\r\n\tobject.traverse(function (o) {\r\n\t\tif ((o as Mesh).isMesh) {\r\n\t\t\tmeshes.push(o as Mesh);\r\n\t\t}\r\n\t});\r\n\treturn meshes;\r\n}\r\n\r\nexport function getComponent(v: Vector3, component: string): number {\r\n\tswitch(component) {\r\n\t\tcase 'x': return v.x;\r\n\t\tcase 'y': return v.y;\r\n\t\tcase 'z': return v.z;\r\n\t}\r\n\tthrow new Error(`Unexpected component ${component}`);\r\n}\r\n\r\n/**\r\n* Modified version of BufferGeometryUtils.mergeVertices, ignoring vertex\r\n* attributes other than position.\r\n*\r\n* @param {THREE.BufferGeometry} geometry\r\n* @param {number} tolerance\r\n* @return {THREE.BufferGeometry>}\r\n*/\r\nfunction simplifyGeometry (geometry: BufferGeometry, tolerance = 1e-4): BufferGeometry {\r\n\r\n\ttolerance = Math.max( tolerance, Number.EPSILON );\r\n\r\n\t// Generate an index buffer if the geometry doesn't have one, or optimize it\r\n\t// if it's already available.\r\n\tconst hashToIndex: {[key: string]: number} = {};\r\n\tconst indices = geometry.getIndex();\r\n\tconst positions = geometry.getAttribute( 'position' );\r\n\tconst vertexCount = indices ? indices.count : positions.count;\r\n\r\n\t// Next value for triangle indices.\r\n\tlet nextIndex = 0;\r\n\r\n\tconst newIndices = [];\r\n\tconst newPositions = [];\r\n\r\n\t// Convert the error tolerance to an amount of decimal places to truncate to.\r\n\tconst decimalShift = Math.log10( 1 / tolerance );\r\n\tconst shiftMultiplier = Math.pow( 10, decimalShift );\r\n\r\n\tfor ( let i = 0; i < vertexCount; i ++ ) {\r\n\r\n\t\tconst index = indices ? indices.getX( i ) : i;\r\n\r\n\t\t// Generate a hash for the vertex attributes at the current index 'i'.\r\n\t\tlet hash = '';\r\n\r\n\t\t// Double tilde truncates the decimal value.\r\n\t\thash += `${ ~ ~ ( positions.getX( index ) * shiftMultiplier ) },`;\r\n\t\thash += `${ ~ ~ ( positions.getY( index ) * shiftMultiplier ) },`;\r\n\t\thash += `${ ~ ~ ( positions.getZ( index ) * shiftMultiplier ) },`;\r\n\r\n\t\t// Add another reference to the vertex if it's already\r\n\t\t// used by another index.\r\n\t\tif ( hash in hashToIndex ) {\r\n\r\n\t\t\tnewIndices.push( hashToIndex[ hash ] );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tnewPositions.push( positions.getX( index ) );\r\n\t\t\tnewPositions.push( positions.getY( index ) );\r\n\t\t\tnewPositions.push( positions.getZ( index ) );\r\n\r\n\t\t\thashToIndex[ hash ] = nextIndex;\r\n\t\t\tnewIndices.push( nextIndex );\r\n\t\t\tnextIndex ++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Construct merged BufferGeometry.\r\n\r\n\tconst positionAttribute = new BufferAttribute(\r\n\t\tnew Float32Array( newPositions ),\r\n\t\tpositions.itemSize,\r\n\t\tpositions.normalized\r\n\t);\r\n\r\n\tconst result = new BufferGeometry();\r\n\tresult.setAttribute( 'position', positionAttribute );\r\n\tresult.setIndex( newIndices );\r\n\r\n\treturn result;\r\n\r\n}\r\n","import { Box, ConvexPolyhedron, Cylinder, Quaternion as CQuaternion, Shape, Sphere, Trimesh, Vec3 } from 'cannon-es';\r\nimport { Box3, BufferGeometry, CylinderGeometry, MathUtils, Mesh, Object3D, SphereGeometry, Vector3 } from 'three';\r\nimport { ConvexHull } from '../lib/ConvexHull';\r\nimport { getComponent, getGeometry, getVertices } from './utils';\r\n\r\nconst PI_2 = Math.PI / 2;\r\n\r\nexport type BoxParameters = { x: number, y: number, z: number };\r\n\r\nexport type CylinderParameters = { radiusTop: number, radiusBottom: number, height: number, segments: number };\r\n\r\nexport type SphereParameters = { radius: number };\r\n\r\nexport type ConvexPolyhedronParameters = { vertices: Float32Array, faces: number[][] };\r\n\r\nexport type TrimeshParameters = { vertices: Float32Array, indices: Uint32Array };\r\n\r\ntype ShapeTypeToShapeParameters = {\r\n\tBox: BoxParameters,\r\n\tCylinder: CylinderParameters,\r\n\tSphere: SphereParameters,\r\n\tConvexPolyhedron: ConvexPolyhedronParameters,\r\n\tTrimesh: TrimeshParameters,\r\n};\r\n\r\nexport enum ShapeType {\r\n\tBOX = 'Box',\r\n\tCYLINDER = 'Cylinder',\r\n\tSPHERE = 'Sphere',\r\n\tHULL = 'ConvexPolyhedron',\r\n\tMESH = 'Trimesh',\r\n}\r\n\r\nexport interface ShapeOptions {\r\n\ttype?: ShapeType,\r\n\tcylinderAxis?: 'x' | 'y' | 'z',\r\n\tsphereRadius?: number,\r\n}\r\n\r\nexport interface ShapeParameters<T extends ShapeType = ShapeType> {\r\n\ttype: T,\r\n\tparams: ShapeTypeToShapeParameters[T],\r\n\toffset?: Vec3,\r\n\torientation?: CQuaternion,\r\n}\r\n\r\nexport interface ShapeResult<T extends Shape = Shape> {\r\n\tshape: T,\r\n\toffset?: Vec3,\r\n\torientation?: CQuaternion,\r\n}\r\n\r\n/**\r\n * Given a THREE.Object3D instance, creates parameters for a CANNON shape.\r\n */\r\nexport const getShapeParameters = function (object: Object3D, options: ShapeOptions = {}): ShapeParameters | null {\r\n\tlet geometry: BufferGeometry | null;\r\n\r\n\tif (options.type === ShapeType.BOX) {\r\n\t\treturn getBoundingBoxParameters(object);\r\n\t} else if (options.type === ShapeType.CYLINDER) {\r\n\t\treturn getBoundingCylinderParameters(object, options);\r\n\t} else if (options.type === ShapeType.SPHERE) {\r\n\t\treturn getBoundingSphereParameters(object, options);\r\n\t} else if (options.type === ShapeType.HULL) {\r\n\t\treturn getConvexPolyhedronParameters(object);\r\n\t} else if (options.type === ShapeType.MESH) {\r\n\t\tgeometry = getGeometry(object);\r\n\t\treturn geometry ? getTrimeshParameters(geometry) : null;\r\n\t} else if (options.type) {\r\n\t\tthrow new Error(`[CANNON.getShapeParameters] Invalid type \"${options.type}\".`);\r\n\t}\r\n\r\n\tgeometry = getGeometry(object);\r\n\tif (!geometry) return null;\r\n\r\n\tswitch (geometry.type) {\r\n\t\tcase 'BoxGeometry':\r\n\t\tcase 'BoxBufferGeometry':\r\n\t\t\treturn getBoxParameters(geometry);\r\n\t\tcase 'CylinderGeometry':\r\n\t\tcase 'CylinderBufferGeometry':\r\n\t\t\treturn getCylinderParameters(geometry as CylinderGeometry);\r\n\t\tcase 'PlaneGeometry':\r\n\t\tcase 'PlaneBufferGeometry':\r\n\t\t\treturn getPlaneParameters(geometry);\r\n\t\tcase 'SphereGeometry':\r\n\t\tcase 'SphereBufferGeometry':\r\n\t\t\treturn getSphereParameters(geometry as SphereGeometry);\r\n\t\tcase 'TubeGeometry':\r\n\t\tcase 'BufferGeometry':\r\n\t\t\treturn getBoundingBoxParameters(object);\r\n\t\tdefault:\r\n\t\t\tconsole.warn(\r\n\t\t\t\t'Unrecognized geometry: \"%s\". Using bounding box as shape.', geometry.type\r\n\t\t\t);\r\n\t\t\treturn getBoxParameters(geometry);\r\n\t}\r\n};\r\n\r\n/**\r\n * Given a THREE.Object3D instance, creates a corresponding CANNON shape.\r\n */\r\nexport const threeToCannon = function (object: Object3D, options: ShapeOptions = {}): ShapeResult | null {\r\n\tconst shapeParameters = getShapeParameters(object, options);\r\n\tif (!shapeParameters) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst { type, params, offset, orientation } = shapeParameters;\r\n\r\n\tlet shape: Shape;\r\n\tif (type === ShapeType.BOX) {\r\n\t\tshape = createBox(params as BoxParameters);\r\n\t} else if (type === ShapeType.CYLINDER) {\r\n\t\tshape = createCylinder(params as CylinderParameters);\r\n\t} else if (type === ShapeType.SPHERE) {\r\n\t\tshape = createSphere(params as SphereParameters);\r\n\t} else if (type === ShapeType.HULL) {\r\n\t\tshape = createConvexPolyhedron(params as ConvexPolyhedronParameters);\r\n\t} else {\r\n\t\tshape = createTrimesh(params as TrimeshParameters);\r\n\t}\r\n\r\n\treturn {\r\n\t\tshape,\r\n\t\toffset,\r\n\t\torientation,\r\n\t};\r\n};\r\n\r\n/******************************************************************************\r\n * Shape construction\r\n */\r\n\r\n function createBox (params: BoxParameters): Box {\r\n\tconst { x, y, z } = params;\r\n\tconst shape = new Box(new Vec3(x, y, z));\r\n\treturn shape;\r\n}\r\n\r\nfunction createCylinder (params: CylinderParameters): Cylinder {\r\n\tconst { radiusTop, radiusBottom, height, segments } = params;\r\n\r\n\tconst shape = new Cylinder(radiusTop, radiusBottom, height, segments);\r\n\r\n\t// Include metadata for serialization.\r\n\t// TODO(cleanup): Is this still necessary?\r\n\tshape.radiusTop = radiusBottom;\r\n\tshape.radiusBottom = radiusBottom;\r\n\tshape.height = height;\r\n\tshape.numSegments = segments;\r\n\r\n\treturn shape;\r\n}\r\n\r\nfunction createSphere (params: SphereParameters): Sphere {\r\n\tconst shape = new Sphere(params.radius);\r\n\r\n\treturn shape;\r\n}\r\n\r\nfunction createConvexPolyhedron (params: ConvexPolyhedronParameters): ConvexPolyhedron {\r\n\tconst { faces, vertices: verticesArray } = params;\r\n\r\n\tconst vertices: Vec3[] = [];\r\n\tfor (let i = 0; i < verticesArray.length; i += 3) {\r\n\t\tvertices.push(new Vec3(\r\n\t\t\tverticesArray[i],\r\n\t\t\tverticesArray[i + 1],\r\n\t\t\tverticesArray[i + 2]\r\n\t\t));\r\n\t}\r\n\r\n\tconst shape = new ConvexPolyhedron({\r\n\t\tfaces,\r\n\t\tvertices\r\n\t});\r\n\r\n\treturn shape;\r\n}\r\n\r\nfunction createTrimesh (params: TrimeshParameters): Trimesh {\r\n\tconst { vertices, indices } = params\r\n\tconst shape = new Trimesh(\r\n\t\tvertices as unknown as number[],\r\n\t\tindices as unknown as number[],\r\n\t);\r\n\r\n\treturn shape;\r\n}\r\n\r\n/******************************************************************************\r\n * Shape parameters\r\n */\r\n\r\nfunction getBoxParameters (geometry: BufferGeometry): ShapeParameters<ShapeType.BOX> | null {\r\n\tconst vertices = getVertices(geometry);\r\n\r\n\tif (!vertices.length) return null;\r\n\r\n\tgeometry.computeBoundingBox();\r\n\tconst box = geometry.boundingBox!;\r\n\r\n\treturn {\r\n\t\ttype: ShapeType.BOX,\r\n\t\tparams: {\r\n\t\t\tx: (box.max.x - box.min.x) / 2,\r\n\t\t\ty: (box.max.y - box.min.y) / 2,\r\n\t\t\tz: (box.max.z - box.min.z) / 2,\r\n\t\t},\r\n\t};\r\n}\r\n\r\n/** Bounding box needs to be computed with the entire subtree, not just geometry. */\r\nfunction getBoundingBoxParameters (object: Object3D): ShapeParameters<ShapeType.BOX> | null {\r\n\tconst clone = object.clone();\r\n\tclone.quaternion.set(0, 0, 0, 1);\r\n\tclone.updateMatrixWorld();\r\n\r\n\tconst box = new Box3().setFromObject(clone);\r\n\r\n\tif (!isFinite(box.min.lengthSq())) return null;\r\n\r\n\tconst localPosition = box.translate(clone.position.negate()).getCenter(new Vector3());\r\n\r\n\treturn {\r\n\t\ttype: ShapeType.BOX,\r\n\t\tparams: {\r\n\t\t\tx: (box.max.x - box.min.x) / 2,\r\n\t\t\ty: (box.max.y - box.min.y) / 2,\r\n\t\t\tz: (box.max.z - box.min.z) / 2,\r\n\t\t},\r\n\t\toffset: localPosition.lengthSq()\r\n\t\t\t? new Vec3(localPosition.x, localPosition.y, localPosition.z)\r\n\t\t\t: undefined,\r\n\t};\r\n}\r\n\r\n/** Computes 3D convex hull as a CANNON.ConvexPolyhedron. */\r\nfunction getConvexPolyhedronParameters (object: Object3D): ShapeParameters<ShapeType.HULL> | null {\r\n\tconst geometry = getGeometry(object);\r\n\r\n\tif (!geometry) return null;\r\n\r\n\t// Perturb.\r\n\tconst eps = 1e-4;\r\n\tfor (let i = 0; i < geometry.attributes.position.count; i++) {\r\n\t\tgeometry.attributes.position.setXYZ(\r\n\t\t\ti,\r\n\t\t\tgeometry.attributes.position.getX(i) + (Math.random() - 0.5) * eps,\r\n\t\t\tgeometry.attributes.position.getY(i) + (Math.random() - 0.5) * eps,\r\n\t\t\tgeometry.attributes.position.getZ(i) + (Math.random() - 0.5) * eps,\r\n\t\t);\r\n\t}\r\n\r\n\t// Compute the 3D convex hull and collect convex hull vertices and faces.\r\n\tconst [ positions, indices ] = new ConvexHull()\r\n\t\t.setFromObject(new Mesh(geometry))\r\n\t\t.toJSON();\r\n\r\n\treturn {\r\n\t\ttype: ShapeType.HULL,\r\n\t\tparams: {\r\n\t\t\tvertices: new Float32Array(positions),\r\n\t\t\tfaces: indices,\r\n\t\t},\r\n\t};\r\n}\r\n\r\nfunction getCylinderParameters (\r\n\tgeometry: CylinderGeometry\r\n): ShapeParameters<ShapeType.CYLINDER> | null {\r\n\tconst params = geometry.parameters;\r\n\r\n\treturn {\r\n\t\ttype: ShapeType.CYLINDER,\r\n\t\tparams: {\r\n\t\t\tradiusTop: params.radiusTop,\r\n\t\t\tradiusBottom: params.radiusBottom,\r\n\t\t\theight: params.height,\r\n\t\t\tsegments: params.radialSegments,\r\n\t\t},\r\n\t\torientation: new CQuaternion()\r\n\t\t\t.setFromEuler(MathUtils.degToRad(-90), 0, 0, 'XYZ')\r\n\t\t\t.normalize(),\r\n\t}\r\n}\r\n\r\nfunction getBoundingCylinderParameters (\r\n\tobject: Object3D,\r\n\toptions: ShapeOptions\r\n): ShapeParameters<ShapeType.CYLINDER> | null {\r\n\tconst axes = ['x', 'y', 'z'];\r\n\tconst majorAxis = options.cylinderAxis || 'y';\r\n\tconst minorAxes = axes.splice(axes.indexOf(majorAxis), 1) && axes;\r\n\tconst box = new Box3().setFromObject(object);\r\n\r\n\tif (!isFinite(box.min.lengthSq())) return null;\r\n\r\n\t// Compute cylinder dimensions.\r\n\tconst height = box.max[majorAxis] - box.min[majorAxis];\r\n\tconst radius = 0.5 * Math.max(\r\n\t\tgetComponent(box.max, minorAxes[0]) - getComponent(box.min, minorAxes[0]),\r\n\t\tgetComponent(box.max, minorAxes[1]) - getComponent(box.min, minorAxes[1]),\r\n\t);\r\n\r\n\tconst eulerX = majorAxis === 'y' ? PI_2 : 0;\r\n\tconst eulerY = majorAxis === 'z' ? PI_2 : 0;\r\n\r\n\treturn {\r\n\t\ttype: ShapeType.CYLINDER,\r\n\t\tparams: {\r\n\t\t\tradiusTop: radius,\r\n\t\t\tradiusBottom: radius,\r\n\t\t\theight,\r\n\t\t\tsegments: 12,\r\n\t\t},\r\n\t\torientation: new CQuaternion()\r\n\t\t\t.setFromEuler(eulerX, eulerY, 0, 'XYZ')\r\n\t\t\t.normalize(),\r\n\t};\r\n}\r\n\r\nfunction getPlaneParameters (geometry: BufferGeometry): ShapeParameters<ShapeType.BOX> | null {\r\n\tgeometry.computeBoundingBox();\r\n\tconst box = geometry.boundingBox!;\r\n\r\n\treturn {\r\n\t\ttype: ShapeType.BOX,\r\n\t\tparams: {\r\n\t\t\tx: (box.max.x - box.min.x) / 2 || 0.1,\r\n\t\t\ty: (box.max.y - box.min.y) / 2 || 0.1,\r\n\t\t\tz: (box.max.z - box.min.z) / 2 || 0.1,\r\n\t\t},\r\n\t};\r\n}\r\n\r\nfunction getSphereParameters (geometry: SphereGeometry): ShapeParameters<ShapeType.SPHERE> | null {\r\n\treturn {\r\n\t\ttype: ShapeType.SPHERE,\r\n\t\tparams: { radius: geometry.parameters.radius },\r\n\t};\r\n}\r\n\r\nfunction getBoundingSphereParameters (\r\n\tobject: Object3D,\r\n\toptions: ShapeOptions\r\n): ShapeParameters<ShapeType.SPHERE> | null {\r\n\tif (options.sphereRadius) {\r\n\t\treturn {\r\n\t\t\ttype: ShapeType.SPHERE,\r\n\t\t\tparams: { radius: options.sphereRadius },\r\n\t\t};\r\n\t}\r\n\tconst geometry = getGeometry(object);\r\n\tif (!geometry) return null;\r\n\tgeometry.computeBoundingSphere();\r\n\r\n\treturn {\r\n\t\ttype: ShapeType.SPHERE,\r\n\t\tparams: { radius: geometry.boundingSphere!.radius },\r\n\t};\r\n}\r\n\r\nfunction getTrimeshParameters (geometry: BufferGeometry): ShapeParameters<ShapeType.MESH> | null {\r\n\tconst vertices = getVertices(geometry);\r\n\r\n\tif (!vertices.length) return null;\r\n\r\n\tconst indices = new Uint32Array(vertices.length);\r\n\tfor (let i = 0; i < vertices.length; i++) {\r\n\t\tindices[i] = i;\r\n\t}\r\n\r\n\treturn {\r\n\t\ttype: ShapeType.MESH,\r\n\t\tparams: {\r\n\t\t\tvertices,\r\n\t\t\tindices,\r\n\t\t},\r\n\t};\r\n}\r\n"],"names":["ConvexHull","Visible","Deleted","v1","Vector3","tolerance","faces","newFaces","assigned","VertexList","unassigned","vertices","Object","assign","prototype","toJSON","srcIndices","map","f","toArray","uniqueSrcIndices","Array","from","Set","flat","sort","dstPositions","i","length","push","point","x","y","z","srcToDstIndexMap","Map","set","dstIndices","get","setFromPoints","points","isArray","console","error","makeEmpty","l","VertexNode","compute","setFromObject","object","updateMatrixWorld","traverse","node","geometry","undefined","isGeometry","toBufferGeometry","BufferGeometry","fromGeometry","isBufferGeometry","attribute","attributes","position","count","fromBufferAttribute","applyMatrix4","matrixWorld","containsPoint","face","distanceToPoint","intersectRay","ray","target","tNear","Infinity","tFar","vN","origin","vD","normal","dot","direction","t","Math","min","max","at","intersectsRay","addVertexToFace","vertex","outside","append","insertBefore","removeVertexFromFace","next","remove","removeAllVerticesFromFace","start","end","removeSubList","prev","deleteFaceVertices","absorbingFace","faceVertices","appendChain","nextVertex","distance","resolveUnassignedPoints","isEmpty","first","maxDistance","maxFace","mark","computeExtremes","minVertices","maxVertices","j","copy","getComponent","setComponent","Number","EPSILON","abs","computeInitialHull","line3","plane","closestPoint","Line3","Plane","extremes","v0","v2","v3","index","closestPointToPoint","distanceToSquared","setFromCoplanarPoints","Face","create","getEdge","setTwin","reindexFaces","activeFaces","nextVertexToAdd","eyeVertex","eyeFace","computeHorizon","eyePoint","crossEdge","horizon","edge","twinEdge","twin","oppositeFace","addAdjoiningFace","horizonEdge","tail","head","addNewFaces","firstSideEdge","previousSideEdge","sideEdge","addVertexToHull","clear","cleanup","midpoint","area","constant","a","b","c","e0","HalfEdge","e1","e2","indices","triangle","Triangle","getNormal","getMidpoint","getArea","distanceTo","lengthSquared","last","insertAfter","_v1","_v2","_q1","Quaternion","getGeometry","meshes","getMeshes","normalizeGeometry","mesh","geometries","pop","simplifyGeometry","mergeBufferGeometries","clone","decompose","scale","vertexCount","itemSize","positionArray","Float32Array","positionOffset","getX","getY","getZ","setAttribute","BufferAttribute","getVertices","o","isMesh","v","component","Error","hashToIndex","getIndex","positions","getAttribute","nextIndex","newIndices","newPositions","decimalShift","log10","shiftMultiplier","pow","hash","positionAttribute","normalized","result","setIndex","PI_2","PI","ShapeType","getShapeParameters","options","type","BOX","getBoundingBoxParameters","CYLINDER","getBoundingCylinderParameters","SPHERE","getBoundingSphereParameters","HULL","getConvexPolyhedronParameters","MESH","getTrimeshParameters","getBoxParameters","getCylinderParameters","getPlaneParameters","getSphereParameters","warn","threeToCannon","shapeParameters","params","offset","orientation","shape","createBox","createCylinder","createSphere","createConvexPolyhedron","createTrimesh","Box","Vec3","radiusTop","radiusBottom","height","segments","Cylinder","numSegments","Sphere","radius","verticesArray","ConvexPolyhedron","Trimesh","computeBoundingBox","box","boundingBox","quaternion","Box3","isFinite","lengthSq","localPosition","translate","negate","getCenter","eps","setXYZ","random","Mesh","parameters","radialSegments","CQuaternion","setFromEuler","MathUtils","degToRad","normalize","axes","majorAxis","cylinderAxis","minorAxes","splice","indexOf","eulerX","eulerY","sphereRadius","computeBoundingSphere","boundingSphere","Uint32Array"],"mappings":"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"}